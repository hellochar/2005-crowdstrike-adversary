{"version":3,"sources":["AdversaryDriver.tsx","smoothstep.tsx","AdversaryRendering.tsx","ImageDropzone.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AdversaryDriver","canvas","state","renderer","scene","camera","controls","adversary","adversaryMaterial","timeStarted","geom","PlaneGeometry","textureBase","duotoneEffect","ambientLight","directionalLight","pointCloud","handleWindowResize","setSize","window","innerWidth","innerHeight","aspect","updateProjectionMatrix","animate","edge0","edge1","x","requestAnimationFrame","update","displacementScale","performance","now","MathUtils","clamp","growLength","mode","material","render","this","WebGLRenderer","setPixelRatio","devicePixelRatio","Scene","PerspectiveCamera","position","set","lookAt","addEventListener","AmbientLight","add","DirectionalLight","background","Color","loadDefaultImage","OrbitControls","autoRotate","setState","img","texture","Texture","onload","needsUpdate","recreateAdversary","duoToneEnabled","map","color","parent","remove","dispose","DuotoneEffect","createDisplacementMap","displacementMap","imageData","MeshStandardMaterial","side","DoubleSide","roughness","metalness","Mesh","AdversaryPointCloud","TextureLoader","load","event","console","log","error","image","document","createElement","width","height","context","getContext","drawImage","getImageData","i","data","length","CanvasTexture","vertices","vertex","imageDataIndex","mapLinear","y","brightness","z","scale","Math","max","computeFlatVertexNormals","source","target","fsQuad","WebGLRenderTarget","DuoToneShaderMaterial","Pass","FullScreenQuad","setRenderTarget","glsl","literals","result","vertexShader","fragmentShader","uniforms","tSource","value","colorLight","duoToneLight","colorDark","duoToneDark","crush","enabled","ShaderMaterial","geometry","Geometry","ix","iy","r","g","b","push","Vector3","colors","newPCGeometry","sprite","PointsMaterial","vertexColors","transparent","alphaTest","opacity","sizeAttenuation","size","newPCMaterial","originalPositions","clone","targetPosition","multiplyScalar","randFloat","sin","angle","atan2","cos","lerp","colorsNeedUpdate","verticesNeedUpdate","Points","AdversaryRendering","driver","useRef","handleRef","React","useCallback","current","useEffect","setImage","ref","ImageDropzone","onGotImage","onDrop","files","rejected","forEach","file","reader","FileReader","onabort","onerror","src","readAsDataURL","useDropzone","maxFiles","getRootProps","getInputProps","isDragActive","className","App","useState","onUpdate","path","label","options","min","step","closed","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"olCA8BO,IAAMA,EAAb,WAeE,WAAmBC,EAAmCC,GAAkB,IAAD,gCAApDD,SAAoD,KAAjBC,QAAiB,KAdhEC,cAcgE,OAbhEC,WAagE,OAZhEC,YAYgE,OAXvEC,cAWuE,OAVvEC,eAUuE,OATvEC,uBASuE,OARvEC,YAAc,EAQyD,KAPvEC,KAAO,IAAIC,IAAc,IAAK,IAAK,IAAK,KAO+B,KANvEC,iBAMuE,OALvEC,mBAKuE,OAJvEC,kBAIuE,OAHvEC,sBAGuE,OAFvEC,gBAEuE,OA6HvEC,mBAAqB,WACnB,EAAKd,SAASe,QAAQC,OAAOC,WAAYD,OAAOE,aAChD,EAAKhB,OAAOiB,OAASH,OAAOC,WAAaD,OAAOE,YAChD,EAAKhB,OAAOkB,0BAhIyD,KAmIvEC,QAAU,WAAO,IAAD,IC7KSC,EAAeC,EAAeC,EDuLhB,GATrCC,sBAAsB,EAAKJ,SAC3B,EAAKlB,SAASuB,SACgB,MAA1B,EAAKrB,oBACP,EAAKA,kBAAkBsB,mBCjLFL,EDkLR,EClLuBC,EDkLpB,IClLmCC,EDkL7BI,YAAYC,MAAQ,EAAKvB,aChLnDkB,EAAIM,IAAUC,OAAOP,EAAIF,IAAUC,EAAQD,GAAQ,EAAK,IAE7CE,GAAK,EAAI,EAAIA,GD8K0C,EAAKzB,MAAMiC,aAKnD,cAApB,EAAKjC,MAAMkC,QACb,YAAKpB,kBAAL,SAAiBQ,WAEnB,YAAKX,qBAAL,SAAoBwB,SAASR,OAAO,EAAK3B,OACzC,YAAKW,qBAAL,SAAoByB,OAAO,EAAKnC,UAChC,EAAKA,SAASmC,OAAO,EAAKlC,MAAO,EAAKC,SAjJtCkC,KAAKpC,SAAW,IAAIqC,IAAc,CAAEvC,WACpCsC,KAAKpC,SAASsC,cAActB,OAAOuB,kBAEnCH,KAAKnC,MAAQ,IAAIuC,IAEjBJ,KAAKlC,OAAS,IAAIuC,IAChB,GACAzB,OAAOC,WAAaD,OAAOE,YAC3B,EACA,KAEFkB,KAAKlC,OAAOwC,SAASC,IAAI,IAAK,EAAG,KACjCP,KAAKlC,OAAO0C,OAAO,EAAG,EAAG,GAGzBR,KAAKtB,qBACLE,OAAO6B,iBAAiB,SAAUT,KAAKtB,oBAEvCsB,KAAKzB,aAAe,IAAImC,IACxBV,KAAKnC,MAAM8C,IAAIX,KAAKzB,cACpByB,KAAKxB,iBAAmB,IAAIoC,IAC5BZ,KAAKxB,iBAAiB8B,SAASC,IAAI,EAAG,EAAG,IACzCP,KAAKnC,MAAM8C,IAAIX,KAAKxB,kBACpBwB,KAAKnC,MAAMgD,WAAa,IAAIC,IAAM,EAAG,EAAG,GAQxCd,KAAKe,mBAELf,KAAKjC,SAAW,IAAIiD,IAAchB,KAAKlC,OAAQkC,KAAKtC,QACpDsC,KAAKjC,SAASkD,YAAa,EAE3BjB,KAAKkB,SAASvD,GACd0B,sBAAsBW,KAAKf,SArD/B,qDAwDWkC,GACP,IAAMC,EAAU,IAAIC,IAAQF,GAC5BA,EAAIG,OAAS,WACXF,EAAQG,aAAc,GAExBvB,KAAKwB,kBAAkBJ,KA7D3B,+BAgEWzD,GAAkB,IAAD,EACxBqC,KAAKrC,MAAQA,EACb,UAAAqC,KAAK1B,qBAAL,SAAoBwB,SAASR,OAAO3B,GACN,MAA1BqC,KAAK/B,oBACHN,EAAM8D,eACRzB,KAAK/B,kBAAkByD,IAAM1B,KAAK1B,cAAc8C,QAEhDpB,KAAK/B,kBAAkByD,IAAM1B,KAAK3B,YAEpC2B,KAAK/B,kBAAkBsD,aAAc,GAEvCvB,KAAKzB,aAAaoD,MAAMpB,IAAI5C,EAAMY,cAClCyB,KAAKxB,iBAAiBmD,MAAMpB,IAAI5C,EAAMa,kBACrCwB,KAAKnC,MAAMgD,WAAqBN,IAAI5C,EAAMkD,YACxB,cAAflD,EAAMkC,MAA0C,MAAlBG,KAAKhC,WAA8C,MAAzBgC,KAAKhC,UAAU4D,QACzE5B,KAAKnC,MAAM8C,IAAIX,KAAKhC,WAChBgC,KAAKvB,YACPuB,KAAKnC,MAAMgE,OAAO7B,KAAKvB,aAED,cAAfd,EAAMkC,MAA2C,MAAnBG,KAAKvB,YAAgD,MAA1BuB,KAAKvB,WAAWmD,SAClF5B,KAAKnC,MAAM8C,IAAIX,KAAKvB,YAChBuB,KAAKhC,WACPgC,KAAKnC,MAAMgE,OAAO7B,KAAKhC,cAtF/B,wCA2F4BK,GACK,IAAD,EAAN,MAAlB2B,KAAKhC,YACPgC,KAAKnC,MAAMgE,OAAO7B,KAAKhC,WACvB,UAAAgC,KAAK/B,yBAAL,SAAwB6D,WAEH,MAAnB9B,KAAKvB,YACPuB,KAAKnC,MAAMgE,OAAO7B,KAAKvB,YAEzBuB,KAAK3B,YAAcA,EACnB2B,KAAK1B,cAAgB,IAAIyD,EAAc1D,EAAa2B,KAAKrC,OATX,MAUEqC,KAAKgC,sBAAsB3D,GAA1D4D,EAV6B,EAUtCb,QAA0Bc,EAVY,EAUZA,UAClClC,KAAK/B,kBAAoB,IAAIkE,IAAqB,CAChDC,KAAMC,IACNX,IAAK1B,KAAK1B,cAAc8C,QACxBa,kBACA1C,kBAAmB,EAEnB+C,UAAW,EACXC,UAAW,IAETvC,KAAKrC,MAAM8D,eACbzB,KAAK/B,kBAAkByD,IAAM1B,KAAK1B,cAAc8C,QAEhDpB,KAAK/B,kBAAkByD,IAAM1B,KAAK3B,YAGpC2B,KAAKhC,UAAY,IAAIwE,IAAKxC,KAAK7B,KAAM6B,KAAK/B,mBAC1C+B,KAAKvB,WAAa,IAAIgE,EAAoBP,GAClB,cAApBlC,KAAKrC,MAAMkC,KACbG,KAAKnC,MAAM8C,IAAIX,KAAKhC,WAEpBgC,KAAKnC,MAAM8C,IAAIX,KAAKvB,YAGtBuB,KAAKpC,SAASmC,OAAOC,KAAKnC,MAAOmC,KAAKlC,QACtCkC,KAAK9B,YAAcsB,YAAYC,QA9HnC,yCAiIsB,IAAD,QACjB,IAAIiD,KAAgBC,KAClB,uDACA,SAACvB,GACC,EAAKI,kBAAkBJ,MAEzB,SAACwB,GAAD,OAAWC,QAAQC,IAAIF,MACvB,SAACA,GAAD,OAAWC,QAAQE,MAAMH,QAxI/B,4CAoKgCxB,GAC5B,IAAM4B,EAAQ5B,EAAQ4B,MAClBtF,EAASuF,SAASC,cAAc,UACpCxF,EAAOyF,MAAQH,EAAMG,MAAQ,GAC7BzF,EAAO0F,OAASJ,EAAMI,OAAS,GAE/B,IAAMC,EAAU3F,EAAO4F,WAAW,MAClC,GAAID,EAAS,CACXA,EAAQE,UAAUP,EAAO,EAAG,EAAGtF,EAAOyF,MAAOzF,EAAO0F,QAGpD,IAJW,IAEHD,EAAkBzF,EAAlByF,MAAOC,EAAW1F,EAAX0F,OACTlB,EAAYmB,EAAQG,aAAa,EAAG,EAAGL,EAAOC,GAC3CK,EAAI,EAAGA,EAAIvB,EAAUwB,KAAKC,OAAQF,GAAK,EACpCvB,EAAUwB,KAAKD,GACnBvB,EAAUwB,KAAKD,EAAI,GACnBvB,EAAUwB,KAAKD,EAAI,GAQ3B,MAAO,CAACrC,QADQ,IAAIwC,IAAclG,GACjBwE,gBA1LvB,yDA8L6Cc,GACzC,IAAItF,EAASuF,SAASC,cAAc,UACpCxF,EAAOyF,MAAQH,EAAMG,MAAQ,GAC7BzF,EAAO0F,OAASJ,EAAMI,OAAS,GAE/B,IAAMC,EAAU3F,EAAO4F,WAAW,MAClC,GAAID,EAAS,CACXA,EAAQE,UAAUP,EAAO,EAAG,EAAGtF,EAAOyF,MAAOzF,EAAO0F,QADzC,MAEHD,EAAkBzF,EAAlByF,MAAOC,EAAW1F,EAAX0F,OACTlB,EAAYmB,EAAQG,aAAa,EAAG,EAAGL,EAAOC,GAI9CjF,EAAO,IAAIC,IACf+E,EAAQ,EACRC,EAAS,EACTD,EAAQ,EACRC,EAAS,GAXA,cAaUjF,EAAK0F,UAbf,IAaX,2BAAoC,CAAC,IAA1BC,EAAyB,QAiB5BC,EAAmC,GAf/BrE,IAAUsE,UAClBF,EAAO1E,EAAI,IACV+D,EAAQ,EACTA,EAAQ,EACR,EACAA,GAU0BA,EAPlBzD,IAAUsE,UAClBF,EAAOG,EAAI,GACXb,EAAS,GACRA,EAAS,EACV,EACAA,IAMIc,EAAa,OAHThC,EAAUwB,KAAKK,GAAkB,KAGX,OAF1B7B,EAAUwB,KAAKK,EAAiB,GAAK,KAEE,OADvC7B,EAAUwB,KAAKK,EAAiB,GAAK,KAE3CD,EAAOK,EAAiB,GAAbD,GAnCF,8BAsCX,IAAME,EAAQ,IAAMC,KAAKC,IAAInB,EAAOC,GAGpC,OAFAjF,EAAKiG,MAAMA,EAAOA,EAAO,GACzBjG,EAAKoG,2BACEpG,OA7Ob,KAkPM4D,E,WASJ,WAAmByC,EAAiB7G,GAAkB,yBAAnC6G,SAAkC,KAJrDC,YAIqD,OAH7CC,YAG6C,OAFrC5E,cAEqC,EACnDE,KAAKyE,OAAS,IAAIE,IAChBH,EAAOxB,MAAMG,MACbqB,EAAOxB,MAAMI,QAEfpD,KAAKF,SAAW,IAAI8E,EAAsBJ,EAAQ7G,GAClDqC,KAAK0E,OAAS,IAAIG,IAAKC,eAAe9E,KAAKF,U,oDAb3C,OAAOE,KAAKyE,OAAOrD,Y,4CAgBPxD,GACZA,EAASmH,gBAAgB/E,KAAKyE,QAC9BzE,KAAK0E,OAAO3E,OAAOnC,GACnBA,EAASmH,gBAAgB,U,KAI7B,SAASC,EAAKC,GAEZ,IADA,IAAIC,EAAS,GACJzB,EAAI,EAAGA,GAAC,0CAAwBA,IACvCyB,GAAUD,EAASxB,GACnByB,GAAuBzB,EAAjB,uBAAiBA,EAAjB,mBAAiBA,EAAjB,GAIR,OADAyB,GAAUD,EAASA,EAAStB,OAAS,GAIvC,IAAMwB,EAAeH,EAAH,KASZI,EAAiBJ,EAAH,KAyBdJ,E,kDACJ,WAAYJ,EAAiB7G,GAAkB,IAAD,8BAC5C,cAAM,CACJ0H,SAAU,CACRC,QAAS,CAAEC,MAAOf,GAClBgB,WAAY,CAAED,MAAO,IAAIzE,IAAMnD,EAAM8H,eACrCC,UAAW,CAAEH,MAAO,IAAIzE,IAAMnD,EAAMgI,cACpCC,MAAO,CAAEL,MAAO,GAChBM,QAAS,CAAEN,OAAO,IAEpBJ,aAAcA,EACdC,eAAgBA,KAEb7D,aAAc,EAZyB,E,mDAevC5D,GACLqC,KAAKqF,SAASG,WAAWD,MAAMhF,IAAI5C,EAAM8H,cACzCzF,KAAKqF,SAASK,UAAUH,MAAMhF,IAAI5C,EAAMgI,aACxC3F,KAAKqF,SAASQ,QAAQN,MAAQ5H,EAAM8D,eACpCzB,KAAKuB,aAAc,M,GApBauE,KAwB9BrD,E,kDAGJ,WAAmBP,GAAuB,IAAD,8BACvC,cAiDJ,SAAuBA,GAIrB,IAHA,IAAM6D,EAAW,IAAIC,IAEd7C,EAAiBjB,EAAjBiB,MAAOC,EAAUlB,EAAVkB,OACL6C,EAAK,EAAGA,EAAK9C,EAAO8C,IAC3B,IAAK,IAAIC,EAAK,EAAGA,EAAK9C,EAAQ8C,IAAM,CAChC,IAAM9G,EAAIM,IAAUsE,UAClBiC,EAAK,GAAK,EAAG9C,GACZA,EAAQ,EACTA,EAAQ,GAGJc,EAAIvE,IAAUsE,UAClBkC,EAAK,GACL,EACA9C,EACAA,EAAS,GACRA,EAAS,GAENW,EAAqC,GAAnBkC,EAAK9C,EAAQ+C,GAC/BC,EAAIjE,EAAUwB,KAAKK,GAAkB,IACzCqC,EAAIlE,EAAUwB,KAAKK,EAAiB,GAAK,IACzCsC,EAAInE,EAAUwB,KAAKK,EAAiB,GAAK,IAErCI,EAAiB,IADJ,MAASgC,EAAI,MAASC,EAAI,MAASC,GAExDN,EAASlC,SAASyC,KAAK,IAAIC,IAAQnH,EAAG6E,EAAGE,IACzC4B,EAASS,OAAOF,KAAK,IAAIxF,IAAMqF,EAAGC,EAAGC,IAGzC,IAAMjC,EAAQ,IAAMC,KAAKC,IAAInB,EAAOC,GAGpC,OAFA2C,EAAS3B,MAAMA,EAAOA,EAAO,GAC7BvB,QAAQC,IAAIiD,GACLA,EAjFCU,CAAcvE,GAmCxB,WACE,IAAMwE,GAAS,IAAIhE,KAAgBC,KAAK,iDAExC,OAAO,IAAIgE,IAAe,CACxBC,cAAc,EACdlF,IAAKgF,EACLG,aAAa,EACbC,UAAW,GACXC,QAAS,GACTC,iBAAiB,EACjBC,KAAM,IA7C0BC,KADfhF,YAAsB,EAFjC/D,UAEiC,IADjCgJ,uBACiC,EAEvC,EAAKhJ,KAAO,EAAK4H,SACjB,EAAKoB,kBAAoB,EAAKhJ,KAAK0F,SAASnC,KAAI,SAACtC,GAAD,OAAOA,EAAEgI,WAHlB,E,sDAUvC,IAHA,IAAMvH,EAAOL,YAAYC,MAAQ,IAAO,GAAK,EAAI,SAAW,YAEtD4H,EAAiB,IAAId,IAClB9C,EAAI,EAAGA,EAAIzD,KAAK7B,KAAK0F,SAASF,OAAQF,IAAK,CAClD,IAAMK,EAAS9D,KAAK7B,KAAK0F,SAASJ,GAGlC,GAFczD,KAAK7B,KAAKqI,OAAO/C,GACzB6D,eAAe5H,IAAU6H,UAAU,IAAM,EAAI,MACtC,cAAT1H,EACFwH,EAAe9G,IACbP,KAAKmH,kBAAkB1D,GAAGrE,EAC1BY,KAAKmH,kBAAkB1D,GAAGQ,EAC1BjE,KAAKmH,kBAAkB1D,GAAGU,EAAI,EAAIE,KAAKmD,IAAK1D,EAAO1E,EAAI,EAAI0E,EAAOG,EAAI,EAAKzE,YAAYC,MAAQ,IAAO,SAEnG,CAEL,IAAMgI,EAAQpD,KAAKqD,MAAM1H,KAAKmH,kBAAkB1D,GAAGQ,EAAGjE,KAAKmH,kBAAkB1D,GAAGrE,GAChFiI,EAAe9G,IACK,IAAlB8D,KAAKsD,IAAIF,GACS,IAAlBpD,KAAKmD,IAAIC,GACTzH,KAAKmH,kBAAkB1D,GAAGU,EAAI,GAAK,GAAKE,KAAKmD,IAAK1D,EAAO1E,EAAI,EAAI0E,EAAOG,EAAI,EAAKzE,YAAYC,MAAQ,IAAO,MAGhHqE,EAAO8D,KAAKP,EAAgB,IAE9BrH,KAAK7B,KAAK0J,kBAAmB,EAC7B7H,KAAK7B,KAAK2J,oBAAqB,M,GAnCDC,KE1W3B,IAAMC,EAAqB,SAAC,GAA4E,IAA1E7G,EAAyE,EAAzEA,IAAKxD,EAAoE,EAApEA,MAClCsK,EAASC,mBACTC,EAAYC,IAAMC,aAAY,SAAC3K,GACrB,MAAVA,IACFuK,EAAOK,QAAU,IAAI7K,EAAgBC,EAAQC,MAG9C,IAWH,OAVA4K,qBAAU,WACc,MAAlBN,EAAOK,SAA0B,MAAPnH,GAC5B8G,EAAOK,QAAQE,SAASrH,KAEzB,CAACA,IACJoH,qBAAU,WACc,MAAlBN,EAAOK,SACTL,EAAOK,QAAQpH,SAASvD,KAEzB,CAACA,IACG,wBAAQ8K,IAAKN,K,0BCnBTO,EAER,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACAC,EAASP,uBACb,SAACQ,EAAeC,EAA2BlG,GACzCiG,EAAME,SAAQ,SAACC,GACb,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMtG,QAAQC,IAAI,6BACnCmG,EAAOG,QAAU,kBAAMvG,QAAQC,IAAI,4BACnCmG,EAAO3H,OAAS,WACd,IAAMH,EAAM8B,SAASC,cAAc,OACnC/B,EAAIkI,IAAMJ,EAAO/D,OACjByD,EAAWxH,IAEb8H,EAAOK,cAAcN,QAGzB,CAACL,IAhBoB,EAkB+BY,YAAY,CAChEX,SACAY,SAAU,IAFJC,EAlBe,EAkBfA,aAAcC,EAlBC,EAkBDA,cAAeC,EAlBd,EAkBcA,aAKrC,OACE,8CAAKC,UAAU,YAAeH,KAA9B,cACE,qCAAWC,MACVC,EACC,wDAEE,6FC4BKE,MAtCf,WAAgB,IAAD,EACWC,qBADX,mBACN3I,EADM,KACDqH,EADC,OAEasB,mBAAmB,CAC3CjK,KAAM,YACNgB,WAAY,UACZjB,WAAY,GACZrB,aAAc,UACdC,iBAAkB,UAClBiD,gBAAgB,EAChBgE,aAAc,UACdE,YAAa,YAVF,mBAENhI,EAFM,KAECuD,EAFD,KAYb,OACE,sBAAK0I,UAAU,MAAf,UACE,cAAC,EAAD,CAAoBzI,IAAKA,EAAKxD,MAAOA,IACrC,cAAC,EAAD,CAAegL,WAAYH,IAC3B,eAAC,IAAD,CAAQ9E,KAAM/F,EAAOoM,SAAU7I,EAA/B,UACE,cAAC,IAAD,CAAW8I,KAAK,OAAOC,MAAM,OAAOC,QAAS,CAAC,YAAa,eAC3D,cAAC,IAAD,CAAUF,KAAK,aAAaC,MAAM,eAClC,cAAC,IAAD,CAAUD,KAAK,eAAeC,MAAM,kBACpC,cAAC,IAAD,CAAUD,KAAK,mBAAmBC,MAAM,sBACxC,cAAC,IAAD,CACED,KAAK,aACLC,MAAM,cACNE,IAAK,EACL7F,IAAK,IACL8F,KAAM,KAER,eAAC,IAAD,CAAWC,QAAQ,EAAOC,MAAO,WAAjC,UACE,cAAC,IAAD,CAAYN,KAAK,iBAAiBC,MAAM,sBACxC,cAAC,IAAD,CAAUD,KAAK,eAAeC,MAAM,mBACpC,cAAC,IAAD,CAAUD,KAAK,cAAcC,MAAM,4BCzC9BM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASjL,OACP,cAAC,IAAMkL,WAAP,UACE,cAAC,EAAD,MAEFhI,SAASiI,eAAe,SAM1BX,M","file":"static/js/main.2cce02ec.chunk.js","sourcesContent":["import {\r\n  AmbientLight,\r\n\r\n  CanvasTexture,\r\n  Color,\r\n  DirectionalLight,\r\n  DoubleSide,\r\n\r\n  Geometry,\r\n  MathUtils,\r\n  Mesh,\r\n  MeshStandardMaterial,\r\n  PerspectiveCamera,\r\n  PlaneGeometry,\r\n\r\n  Points,\r\n  PointsMaterial,\r\n  Scene,\r\n  ShaderMaterial,\r\n  Texture,\r\n  TextureLoader,\r\n  Vector3,\r\n  WebGLRenderer,\r\n  WebGLRenderTarget\r\n} from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { Pass } from \"three/examples/jsm/postprocessing/Pass\";\r\nimport { GUIState } from \"./App\";\r\nimport { smoothstep } from \"./smoothstep\";\r\n\r\nexport class AdversaryDriver {\r\n  public renderer: WebGLRenderer;\r\n  public scene: Scene;\r\n  public camera: PerspectiveCamera;\r\n  controls: OrbitControls;\r\n  adversary?: Mesh;\r\n  adversaryMaterial?: MeshStandardMaterial;\r\n  timeStarted = 0;\r\n  geom = new PlaneGeometry(200, 200, 512, 512);\r\n  textureBase?: Texture;\r\n  duotoneEffect!: DuotoneEffect;\r\n  ambientLight: AmbientLight;\r\n  directionalLight: DirectionalLight;\r\n  pointCloud?: AdversaryPointCloud;\r\n\r\n  constructor(public canvas: HTMLCanvasElement, private state: GUIState) {\r\n    this.renderer = new WebGLRenderer({ canvas });\r\n    this.renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    this.scene = new Scene();\r\n\r\n    this.camera = new PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      1,\r\n      2000\r\n    );\r\n    this.camera.position.set(150, 0, 150);\r\n    this.camera.lookAt(0, 0, 0);\r\n\r\n    // also sets renderer initial size\r\n    this.handleWindowResize();\r\n    window.addEventListener(\"resize\", this.handleWindowResize);\r\n\r\n    this.ambientLight = new AmbientLight();\r\n    this.scene.add(this.ambientLight);\r\n    this.directionalLight = new DirectionalLight();\r\n    this.directionalLight.position.set(0, 0, 10);\r\n    this.scene.add(this.directionalLight);\r\n    this.scene.background = new Color(1, 1, 1);\r\n\r\n    // const mesh = new Mesh(\r\n    //   new TorusKnotBufferGeometry(100, 30),\r\n    //   new MeshStandardMaterial()\r\n    // );\r\n    // this.scene.add(mesh);\r\n    // this.scene.add(new AxesHelper(100));\r\n    this.loadDefaultImage();\r\n\r\n    this.controls = new OrbitControls(this.camera, this.canvas);\r\n    this.controls.autoRotate = true;\r\n\r\n    this.setState(state);\r\n    requestAnimationFrame(this.animate);\r\n  }\r\n\r\n  setImage(img: HTMLImageElement) {\r\n    const texture = new Texture(img);\r\n    img.onload = function () {\r\n      texture.needsUpdate = true;\r\n    };\r\n    this.recreateAdversary(texture);\r\n  }\r\n\r\n  setState(state: GUIState) {\r\n    this.state = state;\r\n    this.duotoneEffect?.material.update(state);\r\n    if (this.adversaryMaterial != null) {\r\n      if (state.duoToneEnabled) {\r\n        this.adversaryMaterial.map = this.duotoneEffect.texture;\r\n      } else {\r\n        this.adversaryMaterial.map = this.textureBase!;\r\n      }\r\n      this.adversaryMaterial.needsUpdate = true;\r\n    }\r\n    this.ambientLight.color.set(state.ambientLight);\r\n    this.directionalLight.color.set(state.directionalLight);\r\n    (this.scene.background as Color).set(state.background);\r\n    if (state.mode === \"heightmap\" && this.adversary != null && this.adversary.parent == null) {\r\n      this.scene.add(this.adversary);\r\n      if (this.pointCloud) {\r\n        this.scene.remove(this.pointCloud);\r\n      }\r\n    } else if (state.mode === \"particles\" && this.pointCloud != null && this.pointCloud.parent == null) {\r\n      this.scene.add(this.pointCloud);\r\n      if (this.adversary) {\r\n        this.scene.remove(this.adversary);  \r\n      }\r\n    }\r\n  }\r\n\r\n  private recreateAdversary(textureBase: Texture) {\r\n    if (this.adversary != null) {\r\n      this.scene.remove(this.adversary);\r\n      this.adversaryMaterial?.dispose();\r\n    }\r\n    if (this.pointCloud != null) {\r\n      this.scene.remove(this.pointCloud);\r\n    }\r\n    this.textureBase = textureBase;\r\n    this.duotoneEffect = new DuotoneEffect(textureBase, this.state);\r\n    const { texture: displacementMap, imageData } = this.createDisplacementMap(textureBase)!;\r\n    this.adversaryMaterial = new MeshStandardMaterial({\r\n      side: DoubleSide,\r\n      map: this.duotoneEffect.texture,\r\n      displacementMap,\r\n      displacementScale: 0,\r\n      // bumpMap: this.textureBase,\r\n      roughness: 1,\r\n      metalness: 0,\r\n    });\r\n    if (this.state.duoToneEnabled) {\r\n      this.adversaryMaterial.map = this.duotoneEffect.texture;\r\n    } else {\r\n      this.adversaryMaterial.map = this.textureBase!;\r\n    }\r\n    // const geom = this.generateDisplacementMappedGeometry(texture.image as HTMLImageElement);\r\n    this.adversary = new Mesh(this.geom, this.adversaryMaterial);\r\n    this.pointCloud = new AdversaryPointCloud(imageData);\r\n    if (this.state.mode === \"heightmap\") {\r\n      this.scene.add(this.adversary);\r\n    } else {\r\n      this.scene.add(this.pointCloud);\r\n    }\r\n\r\n    this.renderer.render(this.scene, this.camera);\r\n    this.timeStarted = performance.now();\r\n  }\r\n\r\n  loadDefaultImage() {\r\n    new TextureLoader().load(\r\n      \"/2005-crowdstrike-adversary/adversaries/Buffalo.jpg\",\r\n      (texture) => {\r\n        this.recreateAdversary(texture);\r\n      },\r\n      (event) => console.log(event),\r\n      (event) => console.error(event)\r\n    );\r\n  }\r\n\r\n  handleWindowResize = () => {\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n    this.camera.aspect = window.innerWidth / window.innerHeight;\r\n    this.camera.updateProjectionMatrix();\r\n  };\r\n\r\n  animate = () => {\r\n    requestAnimationFrame(this.animate);\r\n    this.controls.update();\r\n    if (this.adversaryMaterial != null) {\r\n      this.adversaryMaterial.displacementScale =\r\n        smoothstep(0, 5000, performance.now() - this.timeStarted) * this.state.growLength;\r\n    }\r\n    // if (this.textureBase != null) {\r\n    //   this.textureBase.needsUpdate = true;\r\n    // }\r\n    if (this.state.mode === \"particles\") {\r\n      this.pointCloud?.animate();\r\n    }\r\n    this.duotoneEffect?.material.update(this.state);\r\n    this.duotoneEffect?.render(this.renderer);\r\n    this.renderer.render(this.scene, this.camera);\r\n  };\r\n\r\n  private createDisplacementMap(texture: Texture) {\r\n    const image = texture.image as HTMLImageElement;\r\n    var canvas = document.createElement(\"canvas\");\r\n    canvas.width = image.width / 15;\r\n    canvas.height = image.height / 15;\r\n\r\n    const context = canvas.getContext(\"2d\");\r\n    if (context) {\r\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n      const { width, height } = canvas;\r\n      const imageData = context.getImageData(0, 0, width, height);\r\n      for (let i = 0; i < imageData.data.length; i += 4) {\r\n        const r = imageData.data[i] / 255,\r\n          g = imageData.data[i + 1] / 255,\r\n          b = imageData.data[i + 2] / 255;\r\n        const brightness = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n        // imageData.data[i] = imageData.data[i + 1] = imageData.data[\r\n        //   i + 2\r\n        // ] = Math.floor(brightness * 255);\r\n      }\r\n      // context.putImageData(imageData, 0, 0);\r\n      const texture = new CanvasTexture(canvas);\r\n      return {texture, imageData};\r\n    }\r\n  }\r\n\r\n  private generateDisplacementMappedGeometry(image: HTMLImageElement) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    canvas.width = image.width / 10;\r\n    canvas.height = image.height / 10;\r\n\r\n    const context = canvas.getContext(\"2d\");\r\n    if (context) {\r\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n      const { width, height } = canvas;\r\n      const imageData = context.getImageData(0, 0, width, height);\r\n      // document.body.appendChild(canvas);\r\n      // PlaneGeometry adds 1 vertex row and column, but we don't have\r\n      // imageData there, so we must shrink PlaneGeometry to accomodate\r\n      const geom = new PlaneGeometry(\r\n        width - 1,\r\n        height - 1,\r\n        width - 1,\r\n        height - 1\r\n      );\r\n      for (const vertex of geom.vertices) {\r\n        // -0.5 to line it up perfectly with the grid\r\n        const x = MathUtils.mapLinear(\r\n          vertex.x - 0.5,\r\n          -width / 2,\r\n          width / 2,\r\n          0,\r\n          width\r\n        );\r\n        /// invert the y!\r\n        const y = MathUtils.mapLinear(\r\n          vertex.y - 0.5,\r\n          height / 2,\r\n          -height / 2,\r\n          0,\r\n          height\r\n        );\r\n        const imageDataIndex = (x + width * y) * 4;\r\n        const r = imageData.data[imageDataIndex] / 255,\r\n          g = imageData.data[imageDataIndex + 1] / 255,\r\n          b = imageData.data[imageDataIndex + 2] / 255;\r\n        const brightness = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n        vertex.z = brightness * 20;\r\n      }\r\n\r\n      const scale = 200 / Math.max(width, height);\r\n      geom.scale(scale, scale, 1);\r\n      geom.computeFlatVertexNormals();\r\n      return geom;\r\n    }\r\n  }\r\n}\r\n\r\nclass DuotoneEffect {\r\n  public get texture() {\r\n    return this.target.texture;\r\n  }\r\n\r\n  target: WebGLRenderTarget;\r\n  private fsQuad: Pass.FullScreenQuad;\r\n  public readonly material: DuoToneShaderMaterial;\r\n\r\n  constructor(public source: Texture, state: GUIState) {\r\n    this.target = new WebGLRenderTarget(\r\n      source.image.width,\r\n      source.image.height\r\n    );\r\n    this.material = new DuoToneShaderMaterial(source, state);\r\n    this.fsQuad = new Pass.FullScreenQuad(this.material);\r\n  }\r\n\r\n  public render(renderer: WebGLRenderer) {\r\n    renderer.setRenderTarget(this.target);\r\n    this.fsQuad.render(renderer);\r\n    renderer.setRenderTarget(null);\r\n  }\r\n}\r\n\r\nfunction glsl(literals: TemplateStringsArray, ...placeholders: string[]) {\r\n  let result = \"\";\r\n  for (let i = 0; i < placeholders.length; i++) {\r\n    result += literals[i];\r\n    result += placeholders[i];\r\n  }\r\n\r\n  result += literals[literals.length - 1];\r\n  return result;\r\n}\r\n\r\nconst vertexShader = glsl`\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n  vUv = uv;\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}\r\n`;\r\n\r\nconst fragmentShader = glsl`\r\nuniform vec3 colorLight;\r\nuniform vec3 colorDark;\r\nuniform float crush;\r\nuniform bool enabled;\r\n\r\nuniform sampler2D tSource;\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n  vec4 baseColor = texture2D( tSource, vUv );\r\n\r\n  if (enabled) {\r\n    float grey = dot(baseColor.rgb, vec3(0.299, 0.587, 0.114));\r\n    grey = smoothstep(crush, 1.0 - crush, grey);\r\n\r\n    vec3 outColor = mix(colorDark, colorLight, grey);\r\n\r\n    gl_FragColor = vec4(outColor, 1.0);\r\n  } else {\r\n    gl_FragColor = baseColor;\r\n  }\r\n}\r\n`;\r\n\r\nclass DuoToneShaderMaterial extends ShaderMaterial {\r\n  constructor(source: Texture, state: GUIState) {\r\n    super({\r\n      uniforms: {\r\n        tSource: { value: source },\r\n        colorLight: { value: new Color(state.duoToneLight) },\r\n        colorDark: { value: new Color(state.duoToneDark) },\r\n        crush: { value: 0.0 },\r\n        enabled: { value: true }\r\n      },\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader,\r\n    });\r\n    this.needsUpdate = true;\r\n  }\r\n\r\n  update(state: GUIState) {\r\n    this.uniforms.colorLight.value.set(state.duoToneLight);\r\n    this.uniforms.colorDark.value.set(state.duoToneDark);\r\n    this.uniforms.enabled.value = state.duoToneEnabled;\r\n    this.needsUpdate = true;\r\n  }\r\n}\r\n\r\nclass AdversaryPointCloud extends Points {\r\n  private geom: Geometry;\r\n  private originalPositions: Vector3[];\r\n  constructor(public imageData: ImageData) {\r\n    super(newPCGeometry(imageData), newPCMaterial());\r\n    this.geom = this.geometry as Geometry;\r\n    this.originalPositions = this.geom.vertices.map((x) => x.clone());\r\n  }\r\n\r\n  public animate() {\r\n    const mode = performance.now() / 1000 % 10 < 5 ? \"circle\" : \"heightmap\";\r\n\r\n    const targetPosition = new Vector3();\r\n    for (let i = 0; i < this.geom.vertices.length; i++) {\r\n      const vertex = this.geom.vertices[i];\r\n      const color = this.geom.colors[i];\r\n      color.multiplyScalar(MathUtils.randFloat(0.98, 1 / 0.98));\r\n      if (mode === \"heightmap\") {\r\n        targetPosition.set(\r\n          this.originalPositions[i].x,\r\n          this.originalPositions[i].y, \r\n          this.originalPositions[i].z + 1 * Math.sin((vertex.x / 4 + vertex.y / 7) + performance.now() / 1000 * 0.5),\r\n        );\r\n      } else {\r\n        // const angle = MathUtils.mapLinear(i, 0, this.geom.vertices.length, 0, Math.PI * 2);\r\n        const angle = Math.atan2(this.originalPositions[i].y, this.originalPositions[i].x);\r\n        targetPosition.set(\r\n          Math.cos(angle) * 200,\r\n          Math.sin(angle) * 200,\r\n          this.originalPositions[i].z + 30 + 30 * Math.sin((vertex.x / 1 + vertex.y / 2) + performance.now() / 1000 * 2.5),\r\n        );\r\n      }\r\n      vertex.lerp(targetPosition, 0.2);\r\n    }\r\n    this.geom.colorsNeedUpdate = true;\r\n    this.geom.verticesNeedUpdate = true;\r\n  }\r\n}\r\n\r\nfunction newPCMaterial() {\r\n  const sprite = new TextureLoader().load('/2005-crowdstrike-adversary/textures/disc.png');\r\n\r\n  return new PointsMaterial({\r\n    vertexColors: true,\r\n    map: sprite,\r\n    transparent: true,\r\n    alphaTest: 0.2,\r\n    opacity: 0.5,\r\n    sizeAttenuation: true,\r\n    size: 3\r\n  });\r\n}\r\n\r\nfunction newPCGeometry(imageData: ImageData) {\r\n  const geometry = new Geometry();\r\n\r\n  const {width, height} = imageData;\r\n  for (let ix = 0; ix < width; ix++) {\r\n    for (let iy = 0; iy < height; iy++) {\r\n        const x = MathUtils.mapLinear(\r\n          ix + 0.5, 0, width,\r\n          -width / 2,\r\n          width / 2,\r\n        );\r\n        /// invert the y!\r\n        const y = MathUtils.mapLinear(\r\n          iy + 0.5,\r\n          0,\r\n          height,\r\n          height / 2,\r\n          -height / 2,\r\n        );\r\n        const imageDataIndex = (ix + width * iy) * 4;\r\n        const r = imageData.data[imageDataIndex] / 255,\r\n          g = imageData.data[imageDataIndex + 1] / 255,\r\n          b = imageData.data[imageDataIndex + 2] / 255;\r\n        const brightness = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n        const z = brightness * 50;\r\n      geometry.vertices.push(new Vector3(x, y, z));\r\n      geometry.colors.push(new Color(r, g, b));\r\n    }\r\n  }\r\n  const scale = 200 / Math.max(width, height);\r\n  geometry.scale(scale, scale, 1);\r\n  console.log(geometry);\r\n  return geometry;\r\n}\r\n","import { MathUtils } from \"three\";\r\n\r\n\r\nexport function smoothstep(edge0: number, edge1: number, x: number) {\r\n  // Scale, bias and saturate x to 0..1 range\r\n  x = MathUtils.clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\r\n  // Evaluate polynomial\r\n  return x * x * (3 - 2 * x);\r\n}\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { AdversaryDriver } from \"./AdversaryDriver\";\r\nimport { GUIState } from \"./App\";\r\n\r\nexport const AdversaryRendering = ({ img, state }: { img: HTMLImageElement | undefined; state: GUIState }) => {\r\n  const driver = useRef<AdversaryDriver>();\r\n  const handleRef = React.useCallback((canvas: HTMLCanvasElement | null) => {\r\n    if (canvas != null) {\r\n      driver.current = new AdversaryDriver(canvas, state);\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  useEffect(() => {\r\n    if (driver.current != null && img != null) {\r\n      driver.current.setImage(img);\r\n    }\r\n  }, [img]);\r\n  useEffect(() => {\r\n    if (driver.current != null) {\r\n      driver.current.setState(state);\r\n    }\r\n  }, [state]);\r\n  return <canvas ref={handleRef}></canvas>;\r\n};\r\n","import React, { useCallback } from \"react\";\r\nimport { DropEvent, FileRejection, useDropzone } from \"react-dropzone\";\r\n\r\nexport const ImageDropzone: React.FC<{\r\n  onGotImage: (img: HTMLImageElement) => void;\r\n}> = ({ onGotImage }) => {\r\n  const onDrop = useCallback(\r\n    (files: File[], rejected: FileRejection[], event: DropEvent) => {\r\n      files.forEach((file) => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onabort = () => console.log(\"file reading was aborted\");\r\n        reader.onerror = () => console.log(\"file reading has failed\");\r\n        reader.onload = () => {\r\n          const img = document.createElement(\"img\");\r\n          img.src = reader.result as string;\r\n          onGotImage(img);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    },\r\n    [onGotImage]\r\n  );\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    maxFiles: 1,\r\n  });\r\n\r\n  return (\r\n    <div className=\"dropzone\" {...getRootProps()}>\r\n      <input {...getInputProps()} />\r\n      {isDragActive ? (\r\n        <p>Drop the files here ...</p>\r\n      ) : (\r\n          <p>Drag 'n' drop some files here, or click to select files</p>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport DatGui, {\n  DatBoolean,\n  DatColor,\n  DatFolder,\n  DatNumber,\n  DatSelect\n} from \"react-dat-gui\";\nimport \"react-dat-gui/dist/index.css\";\nimport { AdversaryRendering } from \"./AdversaryRendering\";\nimport \"./App.css\";\nimport { ImageDropzone } from \"./ImageDropzone\";\n\nexport interface GUIState {\n  mode: \"heightmap\" | \"particles\";\n  background: string;\n  ambientLight: string;\n  directionalLight: string;\n  duoToneLight: string;\n  duoToneDark: string;\n  duoToneEnabled: boolean;\n  growLength: number;\n}\n\nfunction App() {\n  const [img, setImage] = useState<HTMLImageElement>();\n  const [state, setState] = useState<GUIState>({\n    mode: \"heightmap\",\n    background: \"#ffffff\",\n    growLength: 50,\n    ambientLight: \"#535353\",\n    directionalLight: \"#d2d2d2\",\n    duoToneEnabled: true,\n    duoToneLight: \"#317671\",\n    duoToneDark: \"#772E49\",\n  });\n  return (\n    <div className=\"App\">\n      <AdversaryRendering img={img} state={state} />\n      <ImageDropzone onGotImage={setImage} />\n      <DatGui data={state} onUpdate={setState}>\n        <DatSelect path=\"mode\" label=\"Mode\" options={[\"heightmap\", \"particles\"]} />\n        <DatColor path=\"background\" label=\"Background\" />\n        <DatColor path=\"ambientLight\" label=\"Ambient Light\" />\n        <DatColor path=\"directionalLight\" label=\"Directional Light\" />\n        <DatNumber\n          path=\"growLength\"\n          label=\"Grow Length\"\n          min={0}\n          max={999}\n          step={10}\n        />\n        <DatFolder closed={false} title={\"Duo Tone\"}>\n          <DatBoolean path=\"duoToneEnabled\" label=\"Duo Tone Enabled?\" />\n          <DatColor path=\"duoToneLight\" label=\"Duo Tone Light\" />\n          <DatColor path=\"duoToneDark\" label=\"Duo Tone Dark\" />\n        </DatFolder>\n      </DatGui>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}