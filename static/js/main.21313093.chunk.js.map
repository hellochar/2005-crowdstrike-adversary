{"version":3,"sources":["perlin.ts","smoothstep.tsx","AdversaryPointCloud.tsx","GradientEffect.tsx","AdversaryDriver.tsx","AdversaryRendering.tsx","ImageDropzone.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Grad","x","y","z","this","grad3","p","perm","Array","gradP","seed","Math","floor","i","v","sqrt","fade","t","lerp","a","b","perlin2","X","Y","n00","dot2","n01","n10","n11","u","smoothstep","edge0","edge1","MathUtils","clamp","AdversaryPointCloud","source","geometry","Geometry","imageData","downsampledImageData","image","width","height","ix","iy","mapLinear","imageDataIndex","r","data","g","vertices","push","Vector3","colors","Color","scale","max","console","log","newPCGeometry","sprite","TextureLoader","load","onUpdate","material","needsUpdate","PointsMaterial","vertexColors","map","transparent","alphaTest","sizeAttenuation","size","newPCMaterial","geom","originalPositions","originalColors","mat","clone","time","performance","now","mode","length","animateHeightmap","STATE","particleDistortion","animateCircleMessy","animateNoiseflow","animateSphere","vertex","color","targetPosition","targetColor","colorsNeedUpdate","verticesNeedUpdate","oPos","atan2","radius","set","originalPosition","dx","dy","dz","setRGB","angle","cos","sin","originalColor","Points","GradientEffect","state","maxBrightness","minBrightness","target","fsQuad","WebGLRenderTarget","GradientShaderMaterial","Pass","FullScreenQuad","texture","renderer","setRenderTarget","render","uniforms","tSource","value","gradient","fill","gradientLength","transparency","enabled","vertexShader","fragmentShader","update","gradientColors","split","forEach","index","gradientTransparency","gradientEnabled","ShaderMaterial","glsl","literals","result","AdversaryDriver","canvas","scene","camera","controls","adversary","adversaryMaterial","timeStarted","PlaneGeometry","textureBase","gradientEffect","pointCloud","handleWindowResize","setSize","window","innerWidth","innerHeight","aspect","halfHeight","left","right","top","bottom","updateProjectionMatrix","animate","requestAnimationFrame","zScale","growLength","displacementScale","position","WebGLRenderer","setPixelRatio","devicePixelRatio","Scene","OrthographicCamera","lookAt","addEventListener","add","AmbientLight","background","loadDefaultImage","OrbitControls","setState","img","Texture","onload","recreateAdversary","parent","remove","dispose","createDisplacementMap","displacementMap","MeshStandardMaterial","roughness","metalness","Mesh","event","error","brightness","min","CanvasTexture","document","createElement","context","getContext","drawImage","getImageData","computeFlatVertexNormals","AdversaryRendering","driver","useRef","handleRef","React","useCallback","current","useEffect","setImage","ref","ImageDropzone","onGotImage","onDrop","files","rejected","file","reader","FileReader","onabort","onerror","src","readAsDataURL","useDropzone","maxFiles","getRootProps","getInputProps","isDragActive","className","App","useState","Object","assign","path","label","options","step","closed","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21313093.chunk.js","sourcesContent":["/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\nexport class Grad {\n  constructor (public x: number, public y: number, public z: number) {}\n\n  dot2(x: number, y: number) {\n    return this.x*x + this.y*y;\n  };\n\n  dot3(x: number, y: number, z: number) {\n    return this.x*x + this.y*y + this.z*z;\n  };\n}\n\nconst grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\n              new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\n              new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\n\nvar p = [151,160,137,91,90,15,\n131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\n// To remove the need for index wrapping, double the permutation table length\nvar perm = new Array(512);\nvar gradP = new Array(512);\n\n// This isn't a very good seeding function, but it works ok. It supports 2^16\n// different seed values. Write something better if you need more seeds.\nexport function seed(seed: number) {\n\n  if(seed > 0 && seed < 1) {\n    // Scale the seed out\n    seed *= 65536;\n  }\n\n  seed = Math.floor(seed);\n  if(seed < 256) {\n    seed |= seed << 8;\n  }\n\n  for(var i = 0; i < 256; i++) {\n    var v;\n    if (i & 1) {\n      v = p[i] ^ (seed & 255);\n    } else {\n      v = p[i] ^ ((seed>>8) & 255);\n    }\n\n    perm[i] = perm[i + 256] = v;\n    gradP[i] = gradP[i + 256] = grad3[v % 12];\n  }\n};\n\nseed(0);\n\n/*\nfor(var i=0; i<256; i++) {\n  perm[i] = perm[i + 256] = p[i];\n  gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n}*/\n\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\nvar F2 = 0.5*(Math.sqrt(3)-1);\nvar G2 = (3-Math.sqrt(3))/6;\n\nvar F3 = 1/3;\nvar G3 = 1/6;\n\n// 2D simplex noise\nexport function simplex2(xin: number, yin: number) {\n  var n0, n1, n2; // Noise contributions from the three corners\n  // Skew the input space to determine which simplex cell we're in\n  var s = (xin+yin)*F2; // Hairy factor for 2D\n  var i = Math.floor(xin+s);\n  var j = Math.floor(yin+s);\n  var t = (i+j)*G2;\n  var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n  var y0 = yin-j+t;\n  // For the 2D case, the simplex shape is an equilateral triangle.\n  // Determine which simplex we are in.\n  var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n  if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n    i1=1; j1=0;\n  } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    i1=0; j1=1;\n  }\n  // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n  // c = (3-sqrt(3))/6\n  var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n  var y1 = y0 - j1 + G2;\n  var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n  var y2 = y0 - 1 + 2 * G2;\n  // Work out the hashed gradient indices of the three simplex corners\n  i &= 255;\n  j &= 255;\n  var gi0 = gradP[i+perm[j]];\n  var gi1 = gradP[i+i1+perm[j+j1]];\n  var gi2 = gradP[i+1+perm[j+1]];\n  // Calculate the contribution from the three corners\n  var t0 = 0.5 - x0*x0-y0*y0;\n  if(t0<0) {\n    n0 = 0;\n  } else {\n    t0 *= t0;\n    n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n  }\n  var t1 = 0.5 - x1*x1-y1*y1;\n  if(t1<0) {\n    n1 = 0;\n  } else {\n    t1 *= t1;\n    n1 = t1 * t1 * gi1.dot2(x1, y1);\n  }\n  var t2 = 0.5 - x2*x2-y2*y2;\n  if(t2<0) {\n    n2 = 0;\n  } else {\n    t2 *= t2;\n    n2 = t2 * t2 * gi2.dot2(x2, y2);\n  }\n  // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n  return 70 * (n0 + n1 + n2);\n};\n\n// 3D simplex noise\nexport function simplex3(xin: number, yin: number, zin: number) {\n  var n0, n1, n2, n3; // Noise contributions from the four corners\n\n  // Skew the input space to determine which simplex cell we're in\n  var s = (xin+yin+zin)*F3; // Hairy factor for 2D\n  var i = Math.floor(xin+s);\n  var j = Math.floor(yin+s);\n  var k = Math.floor(zin+s);\n\n  var t = (i+j+k)*G3;\n  var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n  var y0 = yin-j+t;\n  var z0 = zin-k+t;\n\n  // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n  // Determine which simplex we are in.\n  var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n  var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n  if(x0 >= y0) {\n    if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\n    else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\n    else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\n  } else {\n    if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\n    else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\n    else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\n  }\n  // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n  // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n  // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n  // c = 1/6.\n  var x1 = x0 - i1 + G3; // Offsets for second corner\n  var y1 = y0 - j1 + G3;\n  var z1 = z0 - k1 + G3;\n\n  var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n  var y2 = y0 - j2 + 2 * G3;\n  var z2 = z0 - k2 + 2 * G3;\n\n  var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n  var y3 = y0 - 1 + 3 * G3;\n  var z3 = z0 - 1 + 3 * G3;\n\n  // Work out the hashed gradient indices of the four simplex corners\n  i &= 255;\n  j &= 255;\n  k &= 255;\n  var gi0 = gradP[i+   perm[j+   perm[k   ]]];\n  var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\n  var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\n  var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\n\n  // Calculate the contribution from the four corners\n  var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;\n  if(t0<0) {\n    n0 = 0;\n  } else {\n    t0 *= t0;\n    n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n  }\n  var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;\n  if(t1<0) {\n    n1 = 0;\n  } else {\n    t1 *= t1;\n    n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n  }\n  var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;\n  if(t2<0) {\n    n2 = 0;\n  } else {\n    t2 *= t2;\n    n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n  }\n  var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;\n  if(t3<0) {\n    n3 = 0;\n  } else {\n    t3 *= t3;\n    n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n  }\n  // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n  return 32 * (n0 + n1 + n2 + n3);\n\n};\n\n// ##### Perlin noise stuff\n\nfunction fade(t: number) {\n  return t*t*t*(t*(t*6-15)+10);\n}\n\nfunction lerp(a: number, b: number, t: number) {\n  return (1-t)*a + t*b;\n}\n\n// 2D Perlin Noise\nexport function perlin2(x: number, y: number) {\n  // Find unit grid cell containing point\n  var X = Math.floor(x), Y = Math.floor(y);\n  // Get relative xy coordinates of point within that cell\n  x = x - X; y = y - Y;\n  // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n  X = X & 255; Y = Y & 255;\n\n  // Calculate noise contributions from each of the four corners\n  var n00 = gradP[X+perm[Y]].dot2(x, y);\n  var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\n  var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\n  var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\n\n  // Compute the fade curve value for x\n  var u = fade(x);\n\n  // Interpolate the four results\n  return lerp(\n      lerp(n00, n10, u),\n      lerp(n01, n11, u),\n      fade(y));\n};\n\n// 3D Perlin Noise\nexport function perlin3(x: number, y: number, z: number) {\n  // Find unit grid cell containing point\n  var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n  // Get relative xyz coordinates of point within that cell\n  x = x - X; y = y - Y; z = z - Z;\n  // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n  X = X & 255; Y = Y & 255; Z = Z & 255;\n\n  // Calculate noise contributions from each of the eight corners\n  var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\n  var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\n  var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\n  var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\n  var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\n  var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\n  var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\n  var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\n\n  // Compute the fade curve value for x, y, z\n  var u = fade(x);\n  var v = fade(y);\n  var w = fade(z);\n\n  // Interpolate\n  return lerp(\n      lerp(\n        lerp(n000, n100, u),\n        lerp(n001, n101, u), w),\n      lerp(\n        lerp(n010, n110, u),\n        lerp(n011, n111, u), w),\n      v);\n};\n","import { MathUtils } from \"three\";\r\n\r\n\r\nexport function smoothstep(edge0: number, edge1: number, x: number) {\r\n  // Scale, bias and saturate x to 0..1 range\r\n  x = MathUtils.clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\r\n  // Evaluate polynomial\r\n  return x * x * (3 - 2 * x);\r\n}\r\n","import {\r\n  Color,\r\n  Geometry,\r\n  MathUtils,\r\n  Points,\r\n  PointsMaterial,\r\n  Texture,\r\n  TextureLoader,\r\n  Vector3\r\n} from \"three\";\r\nimport { downsampledImageData } from \"./AdversaryDriver\";\r\nimport { STATE } from \"./App\";\r\nimport { perlin2 } from \"./perlin\";\r\nimport { smoothstep } from \"./smoothstep\";\r\n\r\nexport class AdversaryPointCloud extends Points {\r\n  private geom: Geometry;\r\n  private originalPositions: Vector3[];\r\n  private originalColors: Color[];\r\n  mat: PointsMaterial;\r\n  constructor(public source: Texture) {\r\n    super(newPCGeometry(source), newPCMaterial());\r\n    this.geom = this.geometry as Geometry;\r\n    this.mat = this.material as PointsMaterial;\r\n    this.originalPositions = this.geom.vertices.map((x) => x.clone());\r\n    this.originalColors = this.geom.colors.map((x) => x.clone());\r\n  }\r\n\r\n  public animate() {\r\n    const time = performance.now() / 1000;\r\n    const mode = time % 10 < 5 ? \"mainnav\" : \"heightmap\";\r\n\r\n    for (let i = 0; i < this.geom.vertices.length; i++) {\r\n      if (mode === \"heightmap\") {\r\n        this.animateHeightmap(i, time);\r\n      } else {\r\n        switch (STATE.particleDistortion) {\r\n          case \"messycircle\":\r\n            this.animateCircleMessy(i, time);\r\n            break;\r\n          case \"noiseflow\":\r\n            this.animateNoiseflow(i, time);\r\n            break;\r\n          case \"sphere\":\r\n            this.animateSphere(i, time);\r\n            break;\r\n        }\r\n      }\r\n      const vertex = this.geom.vertices[i];\r\n      const color = this.geom.colors[i];\r\n      vertex.lerp(targetPosition, 0.2);\r\n      color.lerp(targetColor, 0.15);\r\n    }\r\n    this.geom.colorsNeedUpdate = true;\r\n    this.geom.verticesNeedUpdate = true;\r\n  }\r\n\r\n  animateSphere(i: number, time: number) {\r\n    const vertex = this.geom.vertices[i];\r\n    const color = this.geom.colors[i];\r\n    const oPos = this.originalPositions[i];\r\n    const originalColor = this.originalColors[i];\r\n\r\n    const {x, y} = oPos;\r\n    const radius = 100;\r\n\r\n    // 0 to two-pi\r\n    const polar = Math.atan2(y, x);\r\n    // const polarLinesIndexFractional = ((polar + Math.PI) % (Math.PI * 2) / Math.PI * 2) * 8;\r\n    // const targetIndex = Math.floor(polarLinesIndexFractional);\r\n    // const targetIndexLerp = polarLinesIndexFractional - targetIndex;\r\n    // const closestPolarLine = targetIndex * Math.PI * 2;\r\n    // const targetX = Math.cos(closestPolarLine) * radius;\r\n    // const newX = MathUtils.lerp(x, targetX, smoothstep(0, 1, targetIndexLerp));\r\n    // const azimuth = Math.acos(z / radius)\r\n\r\n    // radius = sqrt(x*x + y*y + z*z)\r\n    // sqrt(r^2 - x*x - y*y) = z\r\n    // always positive\r\n    let z = Math.sqrt(radius * radius - x*x - y*y);\r\n    // z += perlin3(x / 50, y / 50, time * 0.5) * 30 - 15;\r\n    // z *= Math.sin(polar * 293912031232.31) < 0 ? -1 : 1;\r\n\r\n    targetPosition.set(\r\n      x,\r\n      y,\r\n      z\r\n    );\r\n  }\r\n\r\n  animateNoiseflow(i: number, time: number) {\r\n    const vertex = this.geom.vertices[i];\r\n    const color = this.geom.colors[i];\r\n    const originalPosition = this.originalPositions[i];\r\n    const originalColor = this.originalColors[i];\r\n    // circle experiment\r\n    const dx = perlin2(\r\n      originalPosition.x / 20,\r\n      originalPosition.y / 20 + time * 0.5 - 4.213\r\n    );\r\n    const dy = perlin2(\r\n      originalPosition.x / 20 + 1000,\r\n      originalPosition.y / 20 + time * 0.5 + 26.586\r\n    );\r\n    const dz = perlin2(\r\n      originalPosition.x / 20 + 9903,\r\n      originalPosition.y / 20 - 200 + time * 0.5 + 90.492\r\n    );\r\n    targetPosition.set(\r\n      originalPosition.x + dx * 50,\r\n      originalPosition.y + dy * 50,\r\n      dz * 50\r\n    );\r\n    targetColor.setRGB(0.92, 0.91, 0.93);\r\n  }\r\n  private animateCircleMessy(i: number, time: number) {\r\n    const vertex = this.geom.vertices[i];\r\n    const color = this.geom.colors[i];\r\n    const originalPosition = this.originalPositions[i];\r\n    const originalColor = this.originalColors[i];\r\n    // const angle = MathUtils.mapLinear(i, 0, this.geom.vertices.length, 0, Math.PI * 2);\r\n    const angle = Math.atan2(\r\n      this.originalPositions[i].y,\r\n      this.originalPositions[i].x\r\n    );\r\n    targetPosition.set(\r\n      Math.cos(angle) * 80 + perlin2(i / 10, time) * 6 - 3,\r\n      Math.sin(angle) * 80 + perlin2(i / 10 + 1.953, time + 399) * 6 - 3,\r\n      this.originalPositions[i].z +\r\n        50 +\r\n        50 *\r\n          Math.sin(\r\n            angle * 24 + time * 2.5\r\n          )\r\n    );\r\n  }\r\n\r\n  private animateHeightmap(i: number, time: number) {\r\n    const vertex = this.geom.vertices[i];\r\n    const color = this.geom.colors[i];\r\n    const originalPosition = this.originalPositions[i];\r\n    const originalColor = this.originalColors[i];\r\n    targetPosition.set(\r\n      originalPosition.x,\r\n      originalPosition.y,\r\n      originalPosition.z +\r\n        1 * Math.sin(vertex.x / 4 + vertex.y / 7 + time * 0.5)\r\n    );\r\n    targetColor.set(originalColor);\r\n  }\r\n}\r\n\r\nfunction newPCMaterial() {\r\n  const sprite = new TextureLoader().load(\r\n    \"/2005-crowdstrike-adversary/textures/disc.png\"\r\n  );\r\n  sprite.onUpdate = () => (material.needsUpdate = true);\r\n\r\n  const material = new PointsMaterial({\r\n    vertexColors: true,\r\n    map: sprite,\r\n    transparent: true,\r\n    alphaTest: 0.2,\r\n    // opacity: 0.75,\r\n    sizeAttenuation: true,\r\n    size: 6,\r\n  });\r\n  return material;\r\n}\r\n\r\nfunction newPCGeometry(source: Texture) {\r\n  const geometry = new Geometry();\r\n\r\n  const { imageData } = downsampledImageData(\r\n    source.image as HTMLImageElement,\r\n    128\r\n  );\r\n\r\n  const { width, height } = imageData;\r\n  for (let ix = 0; ix < width; ix++) {\r\n    for (let iy = 0; iy < height; iy++) {\r\n      const x = MathUtils.mapLinear(ix + 0.5, 0, width, -width / 2, width / 2);\r\n      /// invert the y!\r\n      const y = MathUtils.mapLinear(\r\n        iy + 0.5,\r\n        0,\r\n        height,\r\n        height / 2,\r\n        -height / 2\r\n      );\r\n      const imageDataIndex = (ix + width * iy) * 4;\r\n      const r = imageData.data[imageDataIndex] / 255,\r\n        g = imageData.data[imageDataIndex + 1] / 255,\r\n        b = imageData.data[imageDataIndex + 2] / 255;\r\n      const brightness = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n      const z = brightness * 50;\r\n      geometry.vertices.push(new Vector3(x, y, z));\r\n      geometry.colors.push(new Color(r, g, b));\r\n    }\r\n  }\r\n  const scale = 200 / Math.max(width, height);\r\n  geometry.scale(scale, scale, 1);\r\n  console.log(geometry);\r\n  return geometry;\r\n}\r\n\r\nconst targetPosition = new Vector3();\r\nconst targetColor = new Color();\r\n\r\nfunction lerpTowardsGrid(x: number, grid: number) {\r\n  const closest = Math.floor(x / grid) * grid;\r\n  const lerp = (x - closest) / grid;\r\n  return MathUtils.lerp(x, closest, smoothstep(0, 1, lerp));\r\n}","import {\r\n  Color,\r\n\r\n  ShaderMaterial,\r\n  Texture,\r\n  WebGLRenderer,\r\n  WebGLRenderTarget\r\n} from \"three\";\r\nimport { Pass } from \"three/examples/jsm/postprocessing/Pass\";\r\nimport { GUIState } from \"./App\";\r\n\r\nexport class GradientEffect {\r\n  public get texture() {\r\n    return this.target.texture;\r\n  }\r\n\r\n  target: WebGLRenderTarget;\r\n  private fsQuad: Pass.FullScreenQuad;\r\n  public readonly material: GradientShaderMaterial;\r\n\r\n  constructor(public source: Texture, state: GUIState, public maxBrightness: number, public minBrightness: number) {\r\n    this.target = new WebGLRenderTarget(\r\n      source.image.width,\r\n      source.image.height\r\n    );\r\n    this.material = new GradientShaderMaterial(source, state, maxBrightness, minBrightness);\r\n    this.fsQuad = new Pass.FullScreenQuad(this.material);\r\n  }\r\n\r\n  public render(renderer: WebGLRenderer) {\r\n    renderer.setRenderTarget(this.target);\r\n    this.fsQuad.render(renderer);\r\n    renderer.setRenderTarget(null);\r\n  }\r\n}\r\n\r\nclass GradientShaderMaterial extends ShaderMaterial {\r\n  constructor(source: Texture, state: GUIState, maxBrightness: number, minBrightness: number) {\r\n    super({\r\n      uniforms: {\r\n        tSource: { value: source },\r\n        gradient: { value: (new Array(10).fill(0).map(() => new Color())) },\r\n        gradientLength: { value: 0 },\r\n        transparency: { value: true },\r\n        enabled: { value: true },\r\n        maxBrightness: { value: maxBrightness },\r\n        minBrightness: { value: minBrightness },\r\n      },\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader,\r\n      transparent: true,\r\n    });\r\n    this.update(state);\r\n    this.needsUpdate = true;\r\n  }\r\n\r\n  update(state: GUIState) {\r\n    const gradientColors = state.gradient.split(\" \").map((x) => new Color(x));\r\n    const gradientLength = gradientColors.length;\r\n    gradientColors.forEach((color, index) => {\r\n      this.uniforms.gradient.value[index] = color;\r\n    });\r\n    this.uniforms.gradientLength.value = gradientLength;\r\n    this.uniforms.transparency.value = state.gradientTransparency;\r\n    this.uniforms.enabled.value = state.gradientEnabled;\r\n    this.needsUpdate = true;\r\n  }\r\n}\r\n\r\nconst vertexShader = glsl`\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n  vUv = uv;\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}\r\n`;\r\nconst fragmentShader = glsl`\r\nuniform sampler2D tSource;\r\nuniform vec3[10] gradient;\r\nuniform int gradientLength;\r\nuniform bool transparency;\r\nuniform bool enabled;\r\nuniform float maxBrightness;\r\nuniform float minBrightness;\r\n\r\nvarying vec2 vUv;\r\n\r\nvec4 getGradientColor(float t) {\r\n  float tOnGradient = t * float(gradientLength);\r\n  int lowStop = int(tOnGradient);\r\n  int highStop = int(tOnGradient) + 1;\r\n  float lerpAmount = tOnGradient - float(lowStop);\r\n\r\n  vec3 colorLow = gradient[lowStop];\r\n  vec3 colorHigh = gradient[highStop];\r\n\r\n  float alpha = 1.0;\r\n  if (transparency && lowStop == 0) {\r\n    alpha = lerpAmount;\r\n  }\r\n\r\n  return vec4(mix(colorLow, colorHigh, lerpAmount), alpha);\r\n}\r\n\r\nvoid main() {\r\n  vec4 baseColor = texture2D( tSource, vUv );\r\n\r\n  if (enabled) {\r\n    float brightness = dot(baseColor.rgb, vec3(0.299, 0.587, 0.114));\r\n    float normalizedBrightness = smoothstep(minBrightness, maxBrightness, brightness);\r\n\r\n    vec4 outColor = getGradientColor(normalizedBrightness);\r\n\r\n    gl_FragColor = outColor;\r\n  } else {\r\n    gl_FragColor = baseColor;\r\n  }\r\n}\r\n`;\r\n\r\nfunction glsl(literals: TemplateStringsArray, ...placeholders: string[]) {\r\n  let result = \"\";\r\n  for (let i = 0; i < placeholders.length; i++) {\r\n    result += literals[i];\r\n    result += placeholders[i];\r\n  }\r\n\r\n  result += literals[literals.length - 1];\r\n  return result;\r\n}\r\n","import {\r\n  AmbientLight,\r\n\r\n  CanvasTexture,\r\n  Color,\r\n  MathUtils,\r\n  Mesh,\r\n  MeshStandardMaterial,\r\n  OrthographicCamera,\r\n\r\n  PlaneGeometry,\r\n  Scene,\r\n  Texture,\r\n  TextureLoader,\r\n  WebGLRenderer\r\n} from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { AdversaryPointCloud } from \"./AdversaryPointCloud\";\r\nimport { GUIState } from \"./App\";\r\nimport { GradientEffect } from \"./GradientEffect\";\r\nimport { smoothstep } from \"./smoothstep\";\r\n\r\nexport class AdversaryDriver {\r\n  public renderer: WebGLRenderer;\r\n  public scene: Scene;\r\n  public camera: OrthographicCamera;\r\n  controls: OrbitControls;\r\n  adversary?: Mesh;\r\n  adversaryMaterial?: MeshStandardMaterial;\r\n  timeStarted = 0;\r\n  geom = new PlaneGeometry(200, 200, 512, 512);\r\n  textureBase?: Texture;\r\n  gradientEffect!: GradientEffect;\r\n  pointCloud?: AdversaryPointCloud;\r\n  // in [0 to 1]\r\n  maxBrightness!: number;\r\n  minBrightness!: number;\r\n\r\n  constructor(public canvas: HTMLCanvasElement, private state: GUIState) {\r\n    this.renderer = new WebGLRenderer({ canvas });\r\n    this.renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    this.scene = new Scene();\r\n\r\n    // frustrum will be set by handleWindowResize\r\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, -9999, 9999);\r\n    this.camera.position.set(0, 0, 100);\r\n    this.camera.lookAt(0, 0, 0);\r\n\r\n    // also sets renderer initial size\r\n    this.handleWindowResize();\r\n    window.addEventListener(\"resize\", this.handleWindowResize);\r\n\r\n    this.scene.add(new AmbientLight(0xffffff));\r\n    this.scene.background = new Color(1, 1, 1);\r\n\r\n    this.loadDefaultImage();\r\n\r\n    this.controls = new OrbitControls(this.camera, this.canvas);\r\n\r\n    this.setState(state);\r\n    requestAnimationFrame(this.animate);\r\n  }\r\n\r\n  setImage(img: HTMLImageElement) {\r\n    const texture = new Texture(img);\r\n    img.onload = function () {\r\n      texture.needsUpdate = true;\r\n    };\r\n    this.recreateAdversary(texture);\r\n  }\r\n\r\n  setState(state: GUIState) {\r\n    this.state = state;\r\n    this.gradientEffect?.material.update(state);\r\n    if (this.adversaryMaterial != null) {\r\n      if (state.gradientEnabled) {\r\n        this.adversaryMaterial.map = this.gradientEffect.texture;\r\n      } else {\r\n        this.adversaryMaterial.map = this.textureBase!;\r\n      }\r\n      this.adversaryMaterial.needsUpdate = true;\r\n    }\r\n    (this.scene.background as Color).set(state.background);\r\n    if (\r\n      state.mode === \"heightmap\" &&\r\n      this.adversary != null &&\r\n      this.adversary.parent == null\r\n    ) {\r\n      this.scene.add(this.adversary);\r\n      if (this.pointCloud) {\r\n        this.scene.remove(this.pointCloud);\r\n      }\r\n    } else if (\r\n      state.mode === \"particles\" &&\r\n      this.pointCloud != null &&\r\n      this.pointCloud.parent == null\r\n    ) {\r\n      this.scene.add(this.pointCloud);\r\n      if (this.adversary) {\r\n        this.scene.remove(this.adversary);\r\n      }\r\n    }\r\n  }\r\n\r\n  private recreateAdversary(textureBase: Texture) {\r\n    if (this.adversary != null) {\r\n      this.scene.remove(this.adversary);\r\n      this.adversaryMaterial?.dispose();\r\n    }\r\n    if (this.pointCloud != null) {\r\n      this.scene.remove(this.pointCloud);\r\n    }\r\n    this.textureBase = textureBase;\r\n    const { texture: displacementMap, maxBrightness, minBrightness } = this.createDisplacementMap(\r\n      textureBase\r\n    )!;\r\n    this.maxBrightness = maxBrightness;\r\n    this.minBrightness = minBrightness;\r\n    this.gradientEffect = new GradientEffect(textureBase, this.state, maxBrightness, minBrightness);\r\n    this.adversaryMaterial = new MeshStandardMaterial({\r\n      map: this.gradientEffect.texture,\r\n      displacementMap,\r\n      displacementScale: 0,\r\n      transparent: true,\r\n      roughness: 1,\r\n      metalness: 0,\r\n    });\r\n    if (this.state.gradientEnabled) {\r\n      this.adversaryMaterial.map = this.gradientEffect.texture;\r\n    } else {\r\n      this.adversaryMaterial.map = this.textureBase!;\r\n    }\r\n    this.adversary = new Mesh(this.geom, this.adversaryMaterial);\r\n    this.pointCloud = new AdversaryPointCloud(textureBase);\r\n    if (this.state.mode === \"heightmap\") {\r\n      this.scene.add(this.adversary);\r\n    } else {\r\n      this.scene.add(this.pointCloud);\r\n    }\r\n\r\n    this.renderer.render(this.scene, this.camera);\r\n    this.timeStarted = performance.now();\r\n  }\r\n\r\n  loadDefaultImage() {\r\n    new TextureLoader().load(\r\n      \"/2005-crowdstrike-adversary/adversaries/Buffalo.jpg\",\r\n      (texture) => {\r\n        this.recreateAdversary(texture);\r\n      },\r\n      (event) => console.log(event),\r\n      (event) => console.error(event)\r\n    );\r\n  }\r\n\r\n  handleWindowResize = () => {\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const halfHeight = 100;\r\n    this.camera.left = -halfHeight * aspect;\r\n    this.camera.right = halfHeight * aspect;\r\n    this.camera.top = halfHeight;\r\n    this.camera.bottom = -halfHeight;\r\n    this.camera.updateProjectionMatrix();\r\n  };\r\n\r\n  animate = () => {\r\n    requestAnimationFrame(this.animate);\r\n    this.controls.update();\r\n    if (this.adversaryMaterial != null && this.adversary != null) {\r\n      const zScale = smoothstep(0, 5000, performance.now() - this.timeStarted) * this.state.growLength / this.maxBrightness;\r\n      this.adversaryMaterial.displacementScale = zScale;\r\n      this.adversary.position.z = -zScale / 2;\r\n    }\r\n    // if (this.textureBase != null) {\r\n    //   this.textureBase.needsUpdate = true;\r\n    // }\r\n    if (this.state.mode === \"particles\") {\r\n      this.pointCloud?.animate();\r\n    }\r\n    this.gradientEffect?.material.update(this.state);\r\n    this.gradientEffect?.render(this.renderer);\r\n    this.renderer.render(this.scene, this.camera);\r\n  };\r\n\r\n  private createDisplacementMap(source: Texture) {\r\n    const { imageData, canvas } = downsampledImageData(source.image as HTMLImageElement, 256);\r\n    var maxBrightness = 0;\r\n    var minBrightness = 1;\r\n\r\n    for (let i = 0; i < imageData.data.length; i += 4) {\r\n      const r = imageData.data[i] / 255,\r\n        g = imageData.data[i + 1] / 255,\r\n        b = imageData.data[i + 2] / 255;\r\n      const brightness = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n      maxBrightness = Math.max(brightness, maxBrightness);\r\n      minBrightness = Math.min(brightness, minBrightness);\r\n      imageData.data[i] = imageData.data[i + 1] = imageData.data[i + 2] = brightness;\r\n    }\r\n    // context.putImageData(imageData, 0, 0);\r\n    const texture = new CanvasTexture(canvas);\r\n    return { texture, imageData, maxBrightness, minBrightness };\r\n  }\r\n\r\n  private generateDisplacementMappedGeometry(image: HTMLImageElement) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    canvas.width = image.width / 10;\r\n    canvas.height = image.height / 10;\r\n\r\n    const context = canvas.getContext(\"2d\");\r\n    if (context) {\r\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n      const { width, height } = canvas;\r\n      const imageData = context.getImageData(0, 0, width, height);\r\n      // document.body.appendChild(canvas);\r\n      // PlaneGeometry adds 1 vertex row and column, but we don't have\r\n      // imageData there, so we must shrink PlaneGeometry to accomodate\r\n      const geom = new PlaneGeometry(\r\n        width - 1,\r\n        height - 1,\r\n        width - 1,\r\n        height - 1\r\n      );\r\n      for (const vertex of geom.vertices) {\r\n        // -0.5 to line it up perfectly with the grid\r\n        const x = MathUtils.mapLinear(\r\n          vertex.x - 0.5,\r\n          -width / 2,\r\n          width / 2,\r\n          0,\r\n          width\r\n        );\r\n        /// invert the y!\r\n        const y = MathUtils.mapLinear(\r\n          vertex.y - 0.5,\r\n          height / 2,\r\n          -height / 2,\r\n          0,\r\n          height\r\n        );\r\n        const imageDataIndex = (x + width * y) * 4;\r\n        const r = imageData.data[imageDataIndex] / 255,\r\n          g = imageData.data[imageDataIndex + 1] / 255,\r\n          b = imageData.data[imageDataIndex + 2] / 255;\r\n        const brightness = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n        vertex.z = brightness * 20;\r\n      }\r\n\r\n      const scale = 200 / Math.max(width, height);\r\n      geom.scale(scale, scale, 1);\r\n      geom.computeFlatVertexNormals();\r\n      return geom;\r\n    }\r\n  }\r\n}\r\n\r\nexport function downsampledImageData(image: HTMLImageElement, width: number) {\r\n  var canvas = document.createElement(\"canvas\");\r\n  const height = image.height / image.width * width;\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n\r\n  const context = canvas.getContext(\"2d\")!;\r\n  context.drawImage(image, 0, 0, width, height);\r\n  const imageData = context.getImageData(0, 0, width, height);\r\n  return { canvas, imageData };\r\n}","import React, { useEffect, useRef } from \"react\";\r\nimport { AdversaryDriver } from \"./AdversaryDriver\";\r\nimport { GUIState } from \"./App\";\r\n\r\nexport const AdversaryRendering = ({ img, state }: { img: HTMLImageElement | undefined; state: GUIState }) => {\r\n  const driver = useRef<AdversaryDriver>();\r\n  const handleRef = React.useCallback((canvas: HTMLCanvasElement | null) => {\r\n    if (canvas != null) {\r\n      driver.current = new AdversaryDriver(canvas, state);\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  useEffect(() => {\r\n    if (driver.current != null && img != null) {\r\n      driver.current.setImage(img);\r\n    }\r\n  }, [img]);\r\n  useEffect(() => {\r\n    if (driver.current != null) {\r\n      driver.current.setState(state);\r\n    }\r\n  }, [state]);\r\n  return <canvas ref={handleRef}></canvas>;\r\n};\r\n","import React, { useCallback } from \"react\";\r\nimport { DropEvent, FileRejection, useDropzone } from \"react-dropzone\";\r\n\r\nexport const ImageDropzone: React.FC<{\r\n  onGotImage: (img: HTMLImageElement) => void;\r\n}> = ({ onGotImage }) => {\r\n  const onDrop = useCallback(\r\n    (files: File[], rejected: FileRejection[], event: DropEvent) => {\r\n      files.forEach((file) => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onabort = () => console.log(\"file reading was aborted\");\r\n        reader.onerror = () => console.log(\"file reading has failed\");\r\n        reader.onload = () => {\r\n          const img = document.createElement(\"img\");\r\n          img.src = reader.result as string;\r\n          onGotImage(img);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    },\r\n    [onGotImage]\r\n  );\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    maxFiles: 1,\r\n  });\r\n\r\n  return (\r\n    <div className=\"dropzone\" {...getRootProps()}>\r\n      <input {...getInputProps()} />\r\n      {isDragActive ? (\r\n        <p>Drop the files here ...</p>\r\n      ) : (\r\n          <p>Drag 'n' drop some files here, or click to select files</p>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport DatGui, {\n  DatBoolean,\n  DatColor,\n  DatFolder,\n  DatNumber,\n  DatSelect,\n  DatString\n} from \"react-dat-gui\";\nimport \"react-dat-gui/dist/index.css\";\nimport { AdversaryRendering } from \"./AdversaryRendering\";\nimport \"./App.css\";\nimport { ImageDropzone } from \"./ImageDropzone\";\n\nexport interface GUIState {\n  mode: \"heightmap\" | \"particles\";\n  particleDistortion: \"messycircle\" | \"noiseflow\" | \"sphere\";\n  background: string;\n  gradient: string;\n  gradientEnabled: boolean;\n  growLength: number;\n  gradientTransparency: boolean;\n}\n\nexport const STATE: GUIState = {\n  mode: \"heightmap\",\n  particleDistortion: \"noiseflow\",\n  background: \"#ffffff\",\n  growLength: 50,\n  gradientEnabled: true,\n  gradient: \"#131B1D #31474D #FC0000 #ABABAB #FFFFFF\",\n  gradientTransparency: true,\n}\n\nfunction App() {\n  const [img, setImage] = useState<HTMLImageElement>();\n  const [state, setState] = useState<GUIState>(STATE);\n  useEffect(() => {\n    Object.assign(STATE, state);\n  }, [state]);\n  return (\n    <div className=\"App\">\n      <AdversaryRendering img={img} state={state} />\n      <ImageDropzone onGotImage={setImage} />\n      <DatGui data={state} onUpdate={setState}>\n        <DatSelect path=\"mode\" label=\"Mode\" options={[\"heightmap\", \"particles\"]} />\n        <DatSelect path=\"particleDistortion\" label=\"Particle Distortion\" options={[\"noiseflow\", \"sphere\", \"messycircle\"]} />\n        <DatColor path=\"background\" label=\"Background\" />\n        <DatNumber\n          path=\"growLength\"\n          label=\"Grow Length\"\n          min={0}\n          max={999}\n          step={10}\n        />\n        <DatFolder closed={false} title={\"Gradient\"}>\n          <DatBoolean path=\"gradientEnabled\" label=\"Gradient Enabled?\" />\n          <DatString path=\"gradient\" label=\"Gradient\" />\n          <DatBoolean path=\"gradientTransparency\" label=\"Transparency?\" />\n        </DatFolder>\n      </DatGui>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}